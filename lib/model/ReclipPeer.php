<?php



/**
 * Skeleton subclass for performing query and update operations on the 'reclip' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Wed Feb 29 21:25:06 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class ReclipPeer extends BaseReclipPeer {

	public static function retrieveByClipIdUserId($clip_id, $user_id)
	{
		$c = new Criteria();
		$c->add(self::CLIP_ID, $clip_id);
		$c->add(self::SF_GUARD_USER_PROFILE_ID, $user_id);
		return self::doSelectOne($c);
	}

	public static function retrieveClipIdById($reclip_id)
	{
		$c = new Criteria();
		$c->clearSelectColumns();
		$c->addSelectColumn(self::CLIP_ID);
		$c->add(self::ID, $reclip_id);
		$c->setLimit(1);

		$reclip = BasePeer::doSelect($c)->fetch(PDO::FETCH_ASSOC);
		return $reclip['clip_id'];
	}

	public static function retrieveBySceneTimeId($scene_time_id)
	{
		$c = new Criteria();

		$c->clearSelectColumns();

		$c->addJoin(self::ID, SceneTimePeer::RECLIP_ID, Criteria::INNER_JOIN);
		$c->add(SceneTimePeer::ID, $scene_time_id);
		$c->setLimit(1);

		return current(self::doSelectJoinClip($c));
	}

	public static function retrieveByClipIdFromFriends($clip_id, $user_id)
	{
		$c = new Criteria();

		$c->clearSelectColumns();
		$c->addSelectColumn(ReclipPeer::ID);
		$c->addSelectColumn('COALESCE(
			('.UserFollowerPeer::FOLLOWER_SF_GUARD_USER_PROFILE_ID .'='. $user_id.'),
			('.BoardFollowerPeer::FOLLOWER_SF_GUARD_USER_PROFILE_ID .'='. $user_id.'),
			('.ClipFollowerPeer::FOLLOWER_SF_GUARD_USER_PROFILE_ID .'='. $user_id.'),
			('.ReclipPeer::SF_GUARD_USER_PROFILE_ID .'='. $user_id.'),
			false
		) as friended_video');

		$c->add(ReclipPeer::CLIP_ID, $clip_id);

		$c->addJoin(ReclipPeer::ID, SceneTimePeer::RECLIP_ID, Criteria::LEFT_JOIN);
		$c->addJoin(SceneTimePeer::ID, ScenePeer::SCENE_TIME_ID, Criteria::LEFT_JOIN);

		$c->addJoin(ReclipPeer::SF_GUARD_USER_PROFILE_ID, UserFollowerPeer::FOLLOWING_SF_GUARD_USER_PROFILE_ID, Criteria::LEFT_JOIN);
		$c->addJoin(ScenePeer::BOARD_ID, BoardFollowerPeer::BOARD_ID, Criteria::LEFT_JOIN);
		$c->addJoin($clip_id, ClipFollowerPeer::CLIP_ID, Criteria::LEFT_JOIN);

		$c->setLimit(1);

		return BasePeer::doSelect($c)->fetch(PDO::FETCH_ASSOC);
	}

	public static function repinReclipBySceneIdUserId($scene_time_id, $user_id)
	{
		$c = new Criteria();
		$c->clearSelectColumns();
		$c->addSelectColumn(self::CLIP_ID);
		$c->addJoin(SceneTimePeer::RECLIP_ID, ReclipPeer::ID, Criteria::INNER_JOIN);
		$c->add(SceneTimePeer::ID, $scene_time_id);
		$c->setLimit(1);

		$origin_reclip = BasePeer::doSelect($c)->fetch(PDO::FETCH_ASSOC);

		$new_reclip = self::retrieveByClipIdUserId($origin_reclip['clip_id'], $user_id);
		if(!$new_reclip)
		{
			$new_reclip = new Reclip();
			$new_reclip->setClipId($origin_reclip['clip_id']);
			$new_reclip->setSfGuardUserProfileId($user_id);
			$new_reclip->save();
		}
		return $new_reclip->getId();
	}
} // ReclipPeer
