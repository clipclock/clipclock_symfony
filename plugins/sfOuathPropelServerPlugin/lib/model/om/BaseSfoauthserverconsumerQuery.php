<?php


/**
 * Base class that represents a query for the 'sfOauthServerConsumer' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.4 on:
 *
 * Wed Apr 25 12:43:10 2012
 *
 * @method     SfoauthserverconsumerQuery orderByConsumerKey($order = Criteria::ASC) Order by the consumer_key column
 * @method     SfoauthserverconsumerQuery orderByConsumerSecret($order = Criteria::ASC) Order by the consumer_secret column
 * @method     SfoauthserverconsumerQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method     SfoauthserverconsumerQuery orderByDescription($order = Criteria::ASC) Order by the description column
 * @method     SfoauthserverconsumerQuery orderByProtocole($order = Criteria::ASC) Order by the protocole column
 * @method     SfoauthserverconsumerQuery orderByBaseDomain($order = Criteria::ASC) Order by the base_domain column
 * @method     SfoauthserverconsumerQuery orderByCallback($order = Criteria::ASC) Order by the callback column
 * @method     SfoauthserverconsumerQuery orderByScope($order = Criteria::ASC) Order by the scope column
 * @method     SfoauthserverconsumerQuery orderByNumberQuery($order = Criteria::ASC) Order by the number_query column
 * @method     SfoauthserverconsumerQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     SfoauthserverconsumerQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     SfoauthserverconsumerQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     SfoauthserverconsumerQuery groupByConsumerKey() Group by the consumer_key column
 * @method     SfoauthserverconsumerQuery groupByConsumerSecret() Group by the consumer_secret column
 * @method     SfoauthserverconsumerQuery groupByName() Group by the name column
 * @method     SfoauthserverconsumerQuery groupByDescription() Group by the description column
 * @method     SfoauthserverconsumerQuery groupByProtocole() Group by the protocole column
 * @method     SfoauthserverconsumerQuery groupByBaseDomain() Group by the base_domain column
 * @method     SfoauthserverconsumerQuery groupByCallback() Group by the callback column
 * @method     SfoauthserverconsumerQuery groupByScope() Group by the scope column
 * @method     SfoauthserverconsumerQuery groupByNumberQuery() Group by the number_query column
 * @method     SfoauthserverconsumerQuery groupById() Group by the id column
 * @method     SfoauthserverconsumerQuery groupByCreatedAt() Group by the created_at column
 * @method     SfoauthserverconsumerQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     SfoauthserverconsumerQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     SfoauthserverconsumerQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     SfoauthserverconsumerQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     SfoauthserverconsumerQuery leftJoinSfoauthserverdeveloper($relationAlias = null) Adds a LEFT JOIN clause to the query using the Sfoauthserverdeveloper relation
 * @method     SfoauthserverconsumerQuery rightJoinSfoauthserverdeveloper($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Sfoauthserverdeveloper relation
 * @method     SfoauthserverconsumerQuery innerJoinSfoauthserverdeveloper($relationAlias = null) Adds a INNER JOIN clause to the query using the Sfoauthserverdeveloper relation
 *
 * @method     SfoauthserverconsumerQuery leftJoinSfoauthserverrequesttoken($relationAlias = null) Adds a LEFT JOIN clause to the query using the Sfoauthserverrequesttoken relation
 * @method     SfoauthserverconsumerQuery rightJoinSfoauthserverrequesttoken($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Sfoauthserverrequesttoken relation
 * @method     SfoauthserverconsumerQuery innerJoinSfoauthserverrequesttoken($relationAlias = null) Adds a INNER JOIN clause to the query using the Sfoauthserverrequesttoken relation
 *
 * @method     SfoauthserverconsumerQuery leftJoinSfoauthserveraccesstoken($relationAlias = null) Adds a LEFT JOIN clause to the query using the Sfoauthserveraccesstoken relation
 * @method     SfoauthserverconsumerQuery rightJoinSfoauthserveraccesstoken($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Sfoauthserveraccesstoken relation
 * @method     SfoauthserverconsumerQuery innerJoinSfoauthserveraccesstoken($relationAlias = null) Adds a INNER JOIN clause to the query using the Sfoauthserveraccesstoken relation
 *
 * @method     SfoauthserverconsumerQuery leftJoinSfoauthserveruserscope($relationAlias = null) Adds a LEFT JOIN clause to the query using the Sfoauthserveruserscope relation
 * @method     SfoauthserverconsumerQuery rightJoinSfoauthserveruserscope($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Sfoauthserveruserscope relation
 * @method     SfoauthserverconsumerQuery innerJoinSfoauthserveruserscope($relationAlias = null) Adds a INNER JOIN clause to the query using the Sfoauthserveruserscope relation
 *
 * @method     Sfoauthserverconsumer findOne(PropelPDO $con = null) Return the first Sfoauthserverconsumer matching the query
 * @method     Sfoauthserverconsumer findOneOrCreate(PropelPDO $con = null) Return the first Sfoauthserverconsumer matching the query, or a new Sfoauthserverconsumer object populated from the query conditions when no match is found
 *
 * @method     Sfoauthserverconsumer findOneByConsumerKey(string $consumer_key) Return the first Sfoauthserverconsumer filtered by the consumer_key column
 * @method     Sfoauthserverconsumer findOneByConsumerSecret(string $consumer_secret) Return the first Sfoauthserverconsumer filtered by the consumer_secret column
 * @method     Sfoauthserverconsumer findOneByName(string $name) Return the first Sfoauthserverconsumer filtered by the name column
 * @method     Sfoauthserverconsumer findOneByDescription(string $description) Return the first Sfoauthserverconsumer filtered by the description column
 * @method     Sfoauthserverconsumer findOneByProtocole(int $protocole) Return the first Sfoauthserverconsumer filtered by the protocole column
 * @method     Sfoauthserverconsumer findOneByBaseDomain(string $base_domain) Return the first Sfoauthserverconsumer filtered by the base_domain column
 * @method     Sfoauthserverconsumer findOneByCallback(string $callback) Return the first Sfoauthserverconsumer filtered by the callback column
 * @method     Sfoauthserverconsumer findOneByScope(string $scope) Return the first Sfoauthserverconsumer filtered by the scope column
 * @method     Sfoauthserverconsumer findOneByNumberQuery(int $number_query) Return the first Sfoauthserverconsumer filtered by the number_query column
 * @method     Sfoauthserverconsumer findOneById(int $id) Return the first Sfoauthserverconsumer filtered by the id column
 * @method     Sfoauthserverconsumer findOneByCreatedAt(string $created_at) Return the first Sfoauthserverconsumer filtered by the created_at column
 * @method     Sfoauthserverconsumer findOneByUpdatedAt(string $updated_at) Return the first Sfoauthserverconsumer filtered by the updated_at column
 *
 * @method     array findByConsumerKey(string $consumer_key) Return Sfoauthserverconsumer objects filtered by the consumer_key column
 * @method     array findByConsumerSecret(string $consumer_secret) Return Sfoauthserverconsumer objects filtered by the consumer_secret column
 * @method     array findByName(string $name) Return Sfoauthserverconsumer objects filtered by the name column
 * @method     array findByDescription(string $description) Return Sfoauthserverconsumer objects filtered by the description column
 * @method     array findByProtocole(int $protocole) Return Sfoauthserverconsumer objects filtered by the protocole column
 * @method     array findByBaseDomain(string $base_domain) Return Sfoauthserverconsumer objects filtered by the base_domain column
 * @method     array findByCallback(string $callback) Return Sfoauthserverconsumer objects filtered by the callback column
 * @method     array findByScope(string $scope) Return Sfoauthserverconsumer objects filtered by the scope column
 * @method     array findByNumberQuery(int $number_query) Return Sfoauthserverconsumer objects filtered by the number_query column
 * @method     array findById(int $id) Return Sfoauthserverconsumer objects filtered by the id column
 * @method     array findByCreatedAt(string $created_at) Return Sfoauthserverconsumer objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return Sfoauthserverconsumer objects filtered by the updated_at column
 *
 * @package    propel.generator.plugins.sfOuathPropelServerPlugin.lib.model.om
 */
abstract class BaseSfoauthserverconsumerQuery extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseSfoauthserverconsumerQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Sfoauthserverconsumer', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new SfoauthserverconsumerQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    SfoauthserverconsumerQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof SfoauthserverconsumerQuery) {
			return $criteria;
		}
		$query = new SfoauthserverconsumerQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Sfoauthserverconsumer|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = SfoauthserverconsumerPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(SfoauthserverconsumerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Sfoauthserverconsumer A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT CONSUMER_KEY, CONSUMER_SECRET, NAME, DESCRIPTION, PROTOCOLE, BASE_DOMAIN, CALLBACK, SCOPE, NUMBER_QUERY, ID, CREATED_AT, UPDATED_AT FROM sfOauthServerConsumer WHERE ID = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new Sfoauthserverconsumer();
			$obj->hydrate($row);
			SfoauthserverconsumerPeer::addInstanceToPool($obj, (string) $row[0]);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Sfoauthserverconsumer|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(SfoauthserverconsumerPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(SfoauthserverconsumerPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the consumer_key column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByConsumerKey('fooValue');   // WHERE consumer_key = 'fooValue'
	 * $query->filterByConsumerKey('%fooValue%'); // WHERE consumer_key LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $consumerKey The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByConsumerKey($consumerKey = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($consumerKey)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $consumerKey)) {
				$consumerKey = str_replace('*', '%', $consumerKey);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::CONSUMER_KEY, $consumerKey, $comparison);
	}

	/**
	 * Filter the query on the consumer_secret column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByConsumerSecret('fooValue');   // WHERE consumer_secret = 'fooValue'
	 * $query->filterByConsumerSecret('%fooValue%'); // WHERE consumer_secret LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $consumerSecret The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByConsumerSecret($consumerSecret = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($consumerSecret)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $consumerSecret)) {
				$consumerSecret = str_replace('*', '%', $consumerSecret);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::CONSUMER_SECRET, $consumerSecret, $comparison);
	}

	/**
	 * Filter the query on the name column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
	 * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $name The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByName($name = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($name)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $name)) {
				$name = str_replace('*', '%', $name);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::NAME, $name, $comparison);
	}

	/**
	 * Filter the query on the description column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDescription('fooValue');   // WHERE description = 'fooValue'
	 * $query->filterByDescription('%fooValue%'); // WHERE description LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $description The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByDescription($description = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($description)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $description)) {
				$description = str_replace('*', '%', $description);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::DESCRIPTION, $description, $comparison);
	}

	/**
	 * Filter the query on the protocole column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByProtocole(1234); // WHERE protocole = 1234
	 * $query->filterByProtocole(array(12, 34)); // WHERE protocole IN (12, 34)
	 * $query->filterByProtocole(array('min' => 12)); // WHERE protocole > 12
	 * </code>
	 *
	 * @param     mixed $protocole The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByProtocole($protocole = null, $comparison = null)
	{
		if (is_array($protocole)) {
			$useMinMax = false;
			if (isset($protocole['min'])) {
				$this->addUsingAlias(SfoauthserverconsumerPeer::PROTOCOLE, $protocole['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($protocole['max'])) {
				$this->addUsingAlias(SfoauthserverconsumerPeer::PROTOCOLE, $protocole['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::PROTOCOLE, $protocole, $comparison);
	}

	/**
	 * Filter the query on the base_domain column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByBaseDomain('fooValue');   // WHERE base_domain = 'fooValue'
	 * $query->filterByBaseDomain('%fooValue%'); // WHERE base_domain LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $baseDomain The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByBaseDomain($baseDomain = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($baseDomain)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $baseDomain)) {
				$baseDomain = str_replace('*', '%', $baseDomain);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::BASE_DOMAIN, $baseDomain, $comparison);
	}

	/**
	 * Filter the query on the callback column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCallback('fooValue');   // WHERE callback = 'fooValue'
	 * $query->filterByCallback('%fooValue%'); // WHERE callback LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $callback The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByCallback($callback = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($callback)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $callback)) {
				$callback = str_replace('*', '%', $callback);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::CALLBACK, $callback, $comparison);
	}

	/**
	 * Filter the query on the scope column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByScope('fooValue');   // WHERE scope = 'fooValue'
	 * $query->filterByScope('%fooValue%'); // WHERE scope LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $scope The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByScope($scope = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($scope)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $scope)) {
				$scope = str_replace('*', '%', $scope);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::SCOPE, $scope, $comparison);
	}

	/**
	 * Filter the query on the number_query column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByNumberQuery(1234); // WHERE number_query = 1234
	 * $query->filterByNumberQuery(array(12, 34)); // WHERE number_query IN (12, 34)
	 * $query->filterByNumberQuery(array('min' => 12)); // WHERE number_query > 12
	 * </code>
	 *
	 * @param     mixed $numberQuery The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByNumberQuery($numberQuery = null, $comparison = null)
	{
		if (is_array($numberQuery)) {
			$useMinMax = false;
			if (isset($numberQuery['min'])) {
				$this->addUsingAlias(SfoauthserverconsumerPeer::NUMBER_QUERY, $numberQuery['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($numberQuery['max'])) {
				$this->addUsingAlias(SfoauthserverconsumerPeer::NUMBER_QUERY, $numberQuery['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::NUMBER_QUERY, $numberQuery, $comparison);
	}

	/**
	 * Filter the query on the id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
	 * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
	 * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $createdAt The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(SfoauthserverconsumerPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(SfoauthserverconsumerPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query on the updated_at column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
	 * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
	 * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $updatedAt The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null, $comparison = null)
	{
		if (is_array($updatedAt)) {
			$useMinMax = false;
			if (isset($updatedAt['min'])) {
				$this->addUsingAlias(SfoauthserverconsumerPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($updatedAt['max'])) {
				$this->addUsingAlias(SfoauthserverconsumerPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(SfoauthserverconsumerPeer::UPDATED_AT, $updatedAt, $comparison);
	}

	/**
	 * Filter the query by a related Sfoauthserverdeveloper object
	 *
	 * @param     Sfoauthserverdeveloper $sfoauthserverdeveloper  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterBySfoauthserverdeveloper($sfoauthserverdeveloper, $comparison = null)
	{
		if ($sfoauthserverdeveloper instanceof Sfoauthserverdeveloper) {
			return $this
				->addUsingAlias(SfoauthserverconsumerPeer::ID, $sfoauthserverdeveloper->getConsumerId(), $comparison);
		} elseif ($sfoauthserverdeveloper instanceof PropelCollection) {
			return $this
				->useSfoauthserverdeveloperQuery()
				->filterByPrimaryKeys($sfoauthserverdeveloper->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterBySfoauthserverdeveloper() only accepts arguments of type Sfoauthserverdeveloper or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Sfoauthserverdeveloper relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function joinSfoauthserverdeveloper($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Sfoauthserverdeveloper');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Sfoauthserverdeveloper');
		}

		return $this;
	}

	/**
	 * Use the Sfoauthserverdeveloper relation Sfoauthserverdeveloper object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SfoauthserverdeveloperQuery A secondary query class using the current class as primary query
	 */
	public function useSfoauthserverdeveloperQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinSfoauthserverdeveloper($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Sfoauthserverdeveloper', 'SfoauthserverdeveloperQuery');
	}

	/**
	 * Filter the query by a related Sfoauthserverrequesttoken object
	 *
	 * @param     Sfoauthserverrequesttoken $sfoauthserverrequesttoken  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterBySfoauthserverrequesttoken($sfoauthserverrequesttoken, $comparison = null)
	{
		if ($sfoauthserverrequesttoken instanceof Sfoauthserverrequesttoken) {
			return $this
				->addUsingAlias(SfoauthserverconsumerPeer::ID, $sfoauthserverrequesttoken->getConsumerId(), $comparison);
		} elseif ($sfoauthserverrequesttoken instanceof PropelCollection) {
			return $this
				->useSfoauthserverrequesttokenQuery()
				->filterByPrimaryKeys($sfoauthserverrequesttoken->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterBySfoauthserverrequesttoken() only accepts arguments of type Sfoauthserverrequesttoken or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Sfoauthserverrequesttoken relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function joinSfoauthserverrequesttoken($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Sfoauthserverrequesttoken');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Sfoauthserverrequesttoken');
		}

		return $this;
	}

	/**
	 * Use the Sfoauthserverrequesttoken relation Sfoauthserverrequesttoken object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SfoauthserverrequesttokenQuery A secondary query class using the current class as primary query
	 */
	public function useSfoauthserverrequesttokenQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinSfoauthserverrequesttoken($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Sfoauthserverrequesttoken', 'SfoauthserverrequesttokenQuery');
	}

	/**
	 * Filter the query by a related Sfoauthserveraccesstoken object
	 *
	 * @param     Sfoauthserveraccesstoken $sfoauthserveraccesstoken  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterBySfoauthserveraccesstoken($sfoauthserveraccesstoken, $comparison = null)
	{
		if ($sfoauthserveraccesstoken instanceof Sfoauthserveraccesstoken) {
			return $this
				->addUsingAlias(SfoauthserverconsumerPeer::ID, $sfoauthserveraccesstoken->getConsumerId(), $comparison);
		} elseif ($sfoauthserveraccesstoken instanceof PropelCollection) {
			return $this
				->useSfoauthserveraccesstokenQuery()
				->filterByPrimaryKeys($sfoauthserveraccesstoken->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterBySfoauthserveraccesstoken() only accepts arguments of type Sfoauthserveraccesstoken or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Sfoauthserveraccesstoken relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function joinSfoauthserveraccesstoken($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Sfoauthserveraccesstoken');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Sfoauthserveraccesstoken');
		}

		return $this;
	}

	/**
	 * Use the Sfoauthserveraccesstoken relation Sfoauthserveraccesstoken object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SfoauthserveraccesstokenQuery A secondary query class using the current class as primary query
	 */
	public function useSfoauthserveraccesstokenQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinSfoauthserveraccesstoken($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Sfoauthserveraccesstoken', 'SfoauthserveraccesstokenQuery');
	}

	/**
	 * Filter the query by a related Sfoauthserveruserscope object
	 *
	 * @param     Sfoauthserveruserscope $sfoauthserveruserscope  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function filterBySfoauthserveruserscope($sfoauthserveruserscope, $comparison = null)
	{
		if ($sfoauthserveruserscope instanceof Sfoauthserveruserscope) {
			return $this
				->addUsingAlias(SfoauthserverconsumerPeer::ID, $sfoauthserveruserscope->getConsumerId(), $comparison);
		} elseif ($sfoauthserveruserscope instanceof PropelCollection) {
			return $this
				->useSfoauthserveruserscopeQuery()
				->filterByPrimaryKeys($sfoauthserveruserscope->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterBySfoauthserveruserscope() only accepts arguments of type Sfoauthserveruserscope or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Sfoauthserveruserscope relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function joinSfoauthserveruserscope($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Sfoauthserveruserscope');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Sfoauthserveruserscope');
		}

		return $this;
	}

	/**
	 * Use the Sfoauthserveruserscope relation Sfoauthserveruserscope object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SfoauthserveruserscopeQuery A secondary query class using the current class as primary query
	 */
	public function useSfoauthserveruserscopeQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinSfoauthserveruserscope($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Sfoauthserveruserscope', 'SfoauthserveruserscopeQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Sfoauthserverconsumer $sfoauthserverconsumer Object to remove from the list of results
	 *
	 * @return    SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function prune($sfoauthserverconsumer = null)
	{
		if ($sfoauthserverconsumer) {
			$this->addUsingAlias(SfoauthserverconsumerPeer::ID, $sfoauthserverconsumer->getId(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

	// timestampable behavior
	
	/**
	 * Filter by the latest updated
	 *
	 * @param      int $nbDays Maximum age of the latest update in days
	 *
	 * @return     SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function recentlyUpdated($nbDays = 7)
	{
		return $this->addUsingAlias(SfoauthserverconsumerPeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Filter by the latest created
	 *
	 * @param      int $nbDays Maximum age of in days
	 *
	 * @return     SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function recentlyCreated($nbDays = 7)
	{
		return $this->addUsingAlias(SfoauthserverconsumerPeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by update date desc
	 *
	 * @return     SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function lastUpdatedFirst()
	{
		return $this->addDescendingOrderByColumn(SfoauthserverconsumerPeer::UPDATED_AT);
	}
	
	/**
	 * Order by update date asc
	 *
	 * @return     SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function firstUpdatedFirst()
	{
		return $this->addAscendingOrderByColumn(SfoauthserverconsumerPeer::UPDATED_AT);
	}
	
	/**
	 * Order by create date desc
	 *
	 * @return     SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function lastCreatedFirst()
	{
		return $this->addDescendingOrderByColumn(SfoauthserverconsumerPeer::CREATED_AT);
	}
	
	/**
	 * Order by create date asc
	 *
	 * @return     SfoauthserverconsumerQuery The current query, for fluid interface
	 */
	public function firstCreatedFirst()
	{
		return $this->addAscendingOrderByColumn(SfoauthserverconsumerPeer::CREATED_AT);
	}

} // BaseSfoauthserverconsumerQuery