<?php


/**
 * Base class that represents a row from the 'sfOauthServerConsumer' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.4 on:
 *
 * Wed Apr 25 12:43:10 2012
 *
 * @package    propel.generator.plugins.sfOuathPropelServerPlugin.lib.model.om
 */
abstract class BaseSfoauthserverconsumer extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'SfoauthserverconsumerPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        SfoauthserverconsumerPeer
	 */
	protected static $peer;

	/**
	 * The flag var to prevent infinit loop in deep copy
	 * @var       boolean
	 */
	protected $startCopy = false;

	/**
	 * The value for the consumer_key field.
	 * @var        string
	 */
	protected $consumer_key;

	/**
	 * The value for the consumer_secret field.
	 * @var        string
	 */
	protected $consumer_secret;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the protocole field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $protocole;

	/**
	 * The value for the base_domain field.
	 * @var        string
	 */
	protected $base_domain;

	/**
	 * The value for the callback field.
	 * @var        string
	 */
	protected $callback;

	/**
	 * The value for the scope field.
	 * @var        string
	 */
	protected $scope;

	/**
	 * The value for the number_query field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $number_query;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        array Sfoauthserverdeveloper[] Collection to store aggregation of Sfoauthserverdeveloper objects.
	 */
	protected $collSfoauthserverdevelopers;

	/**
	 * @var        array Sfoauthserverrequesttoken[] Collection to store aggregation of Sfoauthserverrequesttoken objects.
	 */
	protected $collSfoauthserverrequesttokens;

	/**
	 * @var        array Sfoauthserveraccesstoken[] Collection to store aggregation of Sfoauthserveraccesstoken objects.
	 */
	protected $collSfoauthserveraccesstokens;

	/**
	 * @var        array Sfoauthserveruserscope[] Collection to store aggregation of Sfoauthserveruserscope objects.
	 */
	protected $collSfoauthserveruserscopes;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * An array of objects scheduled for deletion.
	 * @var		array
	 */
	protected $sfoauthserverdevelopersScheduledForDeletion = null;

	/**
	 * An array of objects scheduled for deletion.
	 * @var		array
	 */
	protected $sfoauthserverrequesttokensScheduledForDeletion = null;

	/**
	 * An array of objects scheduled for deletion.
	 * @var		array
	 */
	protected $sfoauthserveraccesstokensScheduledForDeletion = null;

	/**
	 * An array of objects scheduled for deletion.
	 * @var		array
	 */
	protected $sfoauthserveruserscopesScheduledForDeletion = null;

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->protocole = 1;
		$this->number_query = 0;
	}

	/**
	 * Initializes internal state of BaseSfoauthserverconsumer object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [consumer_key] column value.
	 * 
	 * @return     string
	 */
	public function getConsumerKey()
	{
		return $this->consumer_key;
	}

	/**
	 * Get the [consumer_secret] column value.
	 * 
	 * @return     string
	 */
	public function getConsumerSecret()
	{
		return $this->consumer_secret;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [protocole] column value.
	 * 
	 * @return     int
	 */
	public function getProtocole()
	{
		return $this->protocole;
	}

	/**
	 * Get the [base_domain] column value.
	 * 
	 * @return     string
	 */
	public function getBaseDomain()
	{
		return $this->base_domain;
	}

	/**
	 * Get the [callback] column value.
	 * 
	 * @return     string
	 */
	public function getCallback()
	{
		return $this->callback;
	}

	/**
	 * Get the [scope] column value.
	 * 
	 * @return     string
	 */
	public function getScope()
	{
		return $this->scope;
	}

	/**
	 * Get the [number_query] column value.
	 * 
	 * @return     int
	 */
	public function getNumberQuery()
	{
		return $this->number_query;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->updated_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [consumer_key] column.
	 * 
	 * @param      string $v new value
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setConsumerKey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->consumer_key !== $v) {
			$this->consumer_key = $v;
			$this->modifiedColumns[] = SfoauthserverconsumerPeer::CONSUMER_KEY;
		}

		return $this;
	} // setConsumerKey()

	/**
	 * Set the value of [consumer_secret] column.
	 * 
	 * @param      string $v new value
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setConsumerSecret($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->consumer_secret !== $v) {
			$this->consumer_secret = $v;
			$this->modifiedColumns[] = SfoauthserverconsumerPeer::CONSUMER_SECRET;
		}

		return $this;
	} // setConsumerSecret()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = SfoauthserverconsumerPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = SfoauthserverconsumerPeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [protocole] column.
	 * 
	 * @param      int $v new value
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setProtocole($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->protocole !== $v) {
			$this->protocole = $v;
			$this->modifiedColumns[] = SfoauthserverconsumerPeer::PROTOCOLE;
		}

		return $this;
	} // setProtocole()

	/**
	 * Set the value of [base_domain] column.
	 * 
	 * @param      string $v new value
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setBaseDomain($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->base_domain !== $v) {
			$this->base_domain = $v;
			$this->modifiedColumns[] = SfoauthserverconsumerPeer::BASE_DOMAIN;
		}

		return $this;
	} // setBaseDomain()

	/**
	 * Set the value of [callback] column.
	 * 
	 * @param      string $v new value
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setCallback($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->callback !== $v) {
			$this->callback = $v;
			$this->modifiedColumns[] = SfoauthserverconsumerPeer::CALLBACK;
		}

		return $this;
	} // setCallback()

	/**
	 * Set the value of [scope] column.
	 * 
	 * @param      string $v new value
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setScope($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->scope !== $v) {
			$this->scope = $v;
			$this->modifiedColumns[] = SfoauthserverconsumerPeer::SCOPE;
		}

		return $this;
	} // setScope()

	/**
	 * Set the value of [number_query] column.
	 * 
	 * @param      int $v new value
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setNumberQuery($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->number_query !== $v) {
			$this->number_query = $v;
			$this->modifiedColumns[] = SfoauthserverconsumerPeer::NUMBER_QUERY;
		}

		return $this;
	} // setNumberQuery()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = SfoauthserverconsumerPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.
	 *               Empty strings are treated as NULL.
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		$dt = PropelDateTime::newInstance($v, null, 'DateTime');
		if ($this->created_at !== null || $dt !== null) {
			$currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
			if ($currentDateAsString !== $newDateAsString) {
				$this->created_at = $newDateAsString;
				$this->modifiedColumns[] = SfoauthserverconsumerPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.
	 *               Empty strings are treated as NULL.
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		$dt = PropelDateTime::newInstance($v, null, 'DateTime');
		if ($this->updated_at !== null || $dt !== null) {
			$currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
			if ($currentDateAsString !== $newDateAsString) {
				$this->updated_at = $newDateAsString;
				$this->modifiedColumns[] = SfoauthserverconsumerPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->protocole !== 1) {
				return false;
			}

			if ($this->number_query !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->consumer_key = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->consumer_secret = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->description = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->protocole = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->base_domain = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->callback = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->scope = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->number_query = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->created_at = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->updated_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 12; // 12 = SfoauthserverconsumerPeer::NUM_HYDRATE_COLUMNS.

		} catch (Exception $e) {
			throw new PropelException("Error populating Sfoauthserverconsumer object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SfoauthserverconsumerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = SfoauthserverconsumerPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collSfoauthserverdevelopers = null;

			$this->collSfoauthserverrequesttokens = null;

			$this->collSfoauthserveraccesstokens = null;

			$this->collSfoauthserveruserscopes = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SfoauthserverconsumerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$deleteQuery = SfoauthserverconsumerQuery::create()
				->filterByPrimaryKey($this->getPrimaryKey());
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSfoauthserverconsumer:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				$deleteQuery->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSfoauthserverconsumer:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (Exception $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SfoauthserverconsumerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSfoauthserverconsumer:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// timestampable behavior
				if (!$this->isColumnModified(SfoauthserverconsumerPeer::CREATED_AT)) {
					$this->setCreatedAt(time());
				}
				if (!$this->isColumnModified(SfoauthserverconsumerPeer::UPDATED_AT)) {
					$this->setUpdatedAt(time());
				}
			} else {
				$ret = $ret && $this->preUpdate($con);
				// timestampable behavior
				if ($this->isModified() && !$this->isColumnModified(SfoauthserverconsumerPeer::UPDATED_AT)) {
					$this->setUpdatedAt(time());
				}
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSfoauthserverconsumer:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				SfoauthserverconsumerPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (Exception $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() || $this->isModified()) {
				// persist changes
				if ($this->isNew()) {
					$this->doInsert($con);
				} else {
					$this->doUpdate($con);
				}
				$affectedRows += 1;
				$this->resetModified();
			}

			if ($this->sfoauthserverdevelopersScheduledForDeletion !== null) {
				if (!$this->sfoauthserverdevelopersScheduledForDeletion->isEmpty()) {
					SfoauthserverdeveloperQuery::create()
						->filterByPrimaryKeys($this->sfoauthserverdevelopersScheduledForDeletion->getPrimaryKeys(false))
						->delete($con);
					$this->sfoauthserverdevelopersScheduledForDeletion = null;
				}
			}

			if ($this->collSfoauthserverdevelopers !== null) {
				foreach ($this->collSfoauthserverdevelopers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->sfoauthserverrequesttokensScheduledForDeletion !== null) {
				if (!$this->sfoauthserverrequesttokensScheduledForDeletion->isEmpty()) {
					SfoauthserverrequesttokenQuery::create()
						->filterByPrimaryKeys($this->sfoauthserverrequesttokensScheduledForDeletion->getPrimaryKeys(false))
						->delete($con);
					$this->sfoauthserverrequesttokensScheduledForDeletion = null;
				}
			}

			if ($this->collSfoauthserverrequesttokens !== null) {
				foreach ($this->collSfoauthserverrequesttokens as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->sfoauthserveraccesstokensScheduledForDeletion !== null) {
				if (!$this->sfoauthserveraccesstokensScheduledForDeletion->isEmpty()) {
					SfoauthserveraccesstokenQuery::create()
						->filterByPrimaryKeys($this->sfoauthserveraccesstokensScheduledForDeletion->getPrimaryKeys(false))
						->delete($con);
					$this->sfoauthserveraccesstokensScheduledForDeletion = null;
				}
			}

			if ($this->collSfoauthserveraccesstokens !== null) {
				foreach ($this->collSfoauthserveraccesstokens as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->sfoauthserveruserscopesScheduledForDeletion !== null) {
				if (!$this->sfoauthserveruserscopesScheduledForDeletion->isEmpty()) {
					SfoauthserveruserscopeQuery::create()
						->filterByPrimaryKeys($this->sfoauthserveruserscopesScheduledForDeletion->getPrimaryKeys(false))
						->delete($con);
					$this->sfoauthserveruserscopesScheduledForDeletion = null;
				}
			}

			if ($this->collSfoauthserveruserscopes !== null) {
				foreach ($this->collSfoauthserveruserscopes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Insert the row in the database.
	 *
	 * @param      PropelPDO $con
	 *
	 * @throws     PropelException
	 * @see        doSave()
	 */
	protected function doInsert(PropelPDO $con)
	{
		$modifiedColumns = array();
		$index = 0;

		$this->modifiedColumns[] = SfoauthserverconsumerPeer::ID;
		if (null !== $this->id) {
			throw new PropelException('Cannot insert a value for auto-increment primary key (' . SfoauthserverconsumerPeer::ID . ')');
		}
		if (null === $this->id) {
			try {				
				$stmt = $con->query("SELECT nextval('sfOauthServerConsumer_id_seq')");
				$row = $stmt->fetch(PDO::FETCH_NUM);
				$this->id = $row[0];
			} catch (Exception $e) {
				throw new PropelException('Unable to get sequence id.', $e);
			}
		}


		 // check the columns in natural order for more readable SQL queries
		if ($this->isColumnModified(SfoauthserverconsumerPeer::CONSUMER_KEY)) {
			$modifiedColumns[':p' . $index++]  = 'CONSUMER_KEY';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::CONSUMER_SECRET)) {
			$modifiedColumns[':p' . $index++]  = 'CONSUMER_SECRET';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::NAME)) {
			$modifiedColumns[':p' . $index++]  = 'NAME';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::DESCRIPTION)) {
			$modifiedColumns[':p' . $index++]  = 'DESCRIPTION';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::PROTOCOLE)) {
			$modifiedColumns[':p' . $index++]  = 'PROTOCOLE';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::BASE_DOMAIN)) {
			$modifiedColumns[':p' . $index++]  = 'BASE_DOMAIN';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::CALLBACK)) {
			$modifiedColumns[':p' . $index++]  = 'CALLBACK';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::SCOPE)) {
			$modifiedColumns[':p' . $index++]  = 'SCOPE';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::NUMBER_QUERY)) {
			$modifiedColumns[':p' . $index++]  = 'NUMBER_QUERY';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::ID)) {
			$modifiedColumns[':p' . $index++]  = 'ID';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::CREATED_AT)) {
			$modifiedColumns[':p' . $index++]  = 'CREATED_AT';
		}
		if ($this->isColumnModified(SfoauthserverconsumerPeer::UPDATED_AT)) {
			$modifiedColumns[':p' . $index++]  = 'UPDATED_AT';
		}

		$sql = sprintf(
			'INSERT INTO sfOauthServerConsumer (%s) VALUES (%s)',
			implode(', ', $modifiedColumns),
			implode(', ', array_keys($modifiedColumns))
		);

		try {
			$stmt = $con->prepare($sql);
			foreach ($modifiedColumns as $identifier => $columnName) {
				switch ($columnName) {
					case 'CONSUMER_KEY':
						$stmt->bindValue($identifier, $this->consumer_key, PDO::PARAM_STR);
						break;
					case 'CONSUMER_SECRET':
						$stmt->bindValue($identifier, $this->consumer_secret, PDO::PARAM_STR);
						break;
					case 'NAME':
						$stmt->bindValue($identifier, $this->name, PDO::PARAM_STR);
						break;
					case 'DESCRIPTION':
						$stmt->bindValue($identifier, $this->description, PDO::PARAM_STR);
						break;
					case 'PROTOCOLE':
						$stmt->bindValue($identifier, $this->protocole, PDO::PARAM_INT);
						break;
					case 'BASE_DOMAIN':
						$stmt->bindValue($identifier, $this->base_domain, PDO::PARAM_STR);
						break;
					case 'CALLBACK':
						$stmt->bindValue($identifier, $this->callback, PDO::PARAM_STR);
						break;
					case 'SCOPE':
						$stmt->bindValue($identifier, $this->scope, PDO::PARAM_STR);
						break;
					case 'NUMBER_QUERY':
						$stmt->bindValue($identifier, $this->number_query, PDO::PARAM_INT);
						break;
					case 'ID':
						$stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
						break;
					case 'CREATED_AT':
						$stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
						break;
					case 'UPDATED_AT':
						$stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
						break;
				}
			}
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
		}

		$this->setNew(false);
	}

	/**
	 * Update the row in the database.
	 *
	 * @param      PropelPDO $con
	 *
	 * @see        doSave()
	 */
	protected function doUpdate(PropelPDO $con)
	{
		$selectCriteria = $this->buildPkeyCriteria();
		$valuesCriteria = $this->buildCriteria();
		BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
	}

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = SfoauthserverconsumerPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collSfoauthserverdevelopers !== null) {
					foreach ($this->collSfoauthserverdevelopers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSfoauthserverrequesttokens !== null) {
					foreach ($this->collSfoauthserverrequesttokens as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSfoauthserveraccesstokens !== null) {
					foreach ($this->collSfoauthserveraccesstokens as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSfoauthserveruserscopes !== null) {
					foreach ($this->collSfoauthserveruserscopes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SfoauthserverconsumerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getConsumerKey();
				break;
			case 1:
				return $this->getConsumerSecret();
				break;
			case 2:
				return $this->getName();
				break;
			case 3:
				return $this->getDescription();
				break;
			case 4:
				return $this->getProtocole();
				break;
			case 5:
				return $this->getBaseDomain();
				break;
			case 6:
				return $this->getCallback();
				break;
			case 7:
				return $this->getScope();
				break;
			case 8:
				return $this->getNumberQuery();
				break;
			case 9:
				return $this->getId();
				break;
			case 10:
				return $this->getCreatedAt();
				break;
			case 11:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
	{
		if (isset($alreadyDumpedObjects['Sfoauthserverconsumer'][$this->getPrimaryKey()])) {
			return '*RECURSION*';
		}
		$alreadyDumpedObjects['Sfoauthserverconsumer'][$this->getPrimaryKey()] = true;
		$keys = SfoauthserverconsumerPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getConsumerKey(),
			$keys[1] => $this->getConsumerSecret(),
			$keys[2] => $this->getName(),
			$keys[3] => $this->getDescription(),
			$keys[4] => $this->getProtocole(),
			$keys[5] => $this->getBaseDomain(),
			$keys[6] => $this->getCallback(),
			$keys[7] => $this->getScope(),
			$keys[8] => $this->getNumberQuery(),
			$keys[9] => $this->getId(),
			$keys[10] => $this->getCreatedAt(),
			$keys[11] => $this->getUpdatedAt(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->collSfoauthserverdevelopers) {
				$result['Sfoauthserverdevelopers'] = $this->collSfoauthserverdevelopers->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collSfoauthserverrequesttokens) {
				$result['Sfoauthserverrequesttokens'] = $this->collSfoauthserverrequesttokens->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collSfoauthserveraccesstokens) {
				$result['Sfoauthserveraccesstokens'] = $this->collSfoauthserveraccesstokens->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collSfoauthserveruserscopes) {
				$result['Sfoauthserveruserscopes'] = $this->collSfoauthserveruserscopes->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SfoauthserverconsumerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setConsumerKey($value);
				break;
			case 1:
				$this->setConsumerSecret($value);
				break;
			case 2:
				$this->setName($value);
				break;
			case 3:
				$this->setDescription($value);
				break;
			case 4:
				$this->setProtocole($value);
				break;
			case 5:
				$this->setBaseDomain($value);
				break;
			case 6:
				$this->setCallback($value);
				break;
			case 7:
				$this->setScope($value);
				break;
			case 8:
				$this->setNumberQuery($value);
				break;
			case 9:
				$this->setId($value);
				break;
			case 10:
				$this->setCreatedAt($value);
				break;
			case 11:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = SfoauthserverconsumerPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setConsumerKey($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setConsumerSecret($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDescription($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setProtocole($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setBaseDomain($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCallback($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setScope($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNumberQuery($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setId($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCreatedAt($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setUpdatedAt($arr[$keys[11]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SfoauthserverconsumerPeer::DATABASE_NAME);

		if ($this->isColumnModified(SfoauthserverconsumerPeer::CONSUMER_KEY)) $criteria->add(SfoauthserverconsumerPeer::CONSUMER_KEY, $this->consumer_key);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::CONSUMER_SECRET)) $criteria->add(SfoauthserverconsumerPeer::CONSUMER_SECRET, $this->consumer_secret);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::NAME)) $criteria->add(SfoauthserverconsumerPeer::NAME, $this->name);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::DESCRIPTION)) $criteria->add(SfoauthserverconsumerPeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::PROTOCOLE)) $criteria->add(SfoauthserverconsumerPeer::PROTOCOLE, $this->protocole);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::BASE_DOMAIN)) $criteria->add(SfoauthserverconsumerPeer::BASE_DOMAIN, $this->base_domain);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::CALLBACK)) $criteria->add(SfoauthserverconsumerPeer::CALLBACK, $this->callback);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::SCOPE)) $criteria->add(SfoauthserverconsumerPeer::SCOPE, $this->scope);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::NUMBER_QUERY)) $criteria->add(SfoauthserverconsumerPeer::NUMBER_QUERY, $this->number_query);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::ID)) $criteria->add(SfoauthserverconsumerPeer::ID, $this->id);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::CREATED_AT)) $criteria->add(SfoauthserverconsumerPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(SfoauthserverconsumerPeer::UPDATED_AT)) $criteria->add(SfoauthserverconsumerPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SfoauthserverconsumerPeer::DATABASE_NAME);
		$criteria->add(SfoauthserverconsumerPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Sfoauthserverconsumer (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @param      boolean $makeNew Whether to reset autoincrement PKs and make the object new.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
	{
		$copyObj->setConsumerKey($this->getConsumerKey());
		$copyObj->setConsumerSecret($this->getConsumerSecret());
		$copyObj->setName($this->getName());
		$copyObj->setDescription($this->getDescription());
		$copyObj->setProtocole($this->getProtocole());
		$copyObj->setBaseDomain($this->getBaseDomain());
		$copyObj->setCallback($this->getCallback());
		$copyObj->setScope($this->getScope());
		$copyObj->setNumberQuery($this->getNumberQuery());
		$copyObj->setCreatedAt($this->getCreatedAt());
		$copyObj->setUpdatedAt($this->getUpdatedAt());

		if ($deepCopy && !$this->startCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);
			// store object hash to prevent cycle
			$this->startCopy = true;

			foreach ($this->getSfoauthserverdevelopers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSfoauthserverdeveloper($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSfoauthserverrequesttokens() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSfoauthserverrequesttoken($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSfoauthserveraccesstokens() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSfoauthserveraccesstoken($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSfoauthserveruserscopes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSfoauthserveruserscope($relObj->copy($deepCopy));
				}
			}

			//unflag object copy
			$this->startCopy = false;
		} // if ($deepCopy)

		if ($makeNew) {
			$copyObj->setNew(true);
			$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
		}
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Sfoauthserverconsumer Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     SfoauthserverconsumerPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SfoauthserverconsumerPeer();
		}
		return self::$peer;
	}


	/**
	 * Initializes a collection based on the name of a relation.
	 * Avoids crafting an 'init[$relationName]s' method name
	 * that wouldn't work when StandardEnglishPluralizer is used.
	 *
	 * @param      string $relationName The name of the relation to initialize
	 * @return     void
	 */
	public function initRelation($relationName)
	{
		if ('Sfoauthserverdeveloper' == $relationName) {
			return $this->initSfoauthserverdevelopers();
		}
		if ('Sfoauthserverrequesttoken' == $relationName) {
			return $this->initSfoauthserverrequesttokens();
		}
		if ('Sfoauthserveraccesstoken' == $relationName) {
			return $this->initSfoauthserveraccesstokens();
		}
		if ('Sfoauthserveruserscope' == $relationName) {
			return $this->initSfoauthserveruserscopes();
		}
	}

	/**
	 * Clears out the collSfoauthserverdevelopers collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSfoauthserverdevelopers()
	 */
	public function clearSfoauthserverdevelopers()
	{
		$this->collSfoauthserverdevelopers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSfoauthserverdevelopers collection.
	 *
	 * By default this just sets the collSfoauthserverdevelopers collection to an empty array (like clearcollSfoauthserverdevelopers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initSfoauthserverdevelopers($overrideExisting = true)
	{
		if (null !== $this->collSfoauthserverdevelopers && !$overrideExisting) {
			return;
		}
		$this->collSfoauthserverdevelopers = new PropelObjectCollection();
		$this->collSfoauthserverdevelopers->setModel('Sfoauthserverdeveloper');
	}

	/**
	 * Gets an array of Sfoauthserverdeveloper objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Sfoauthserverconsumer is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Sfoauthserverdeveloper[] List of Sfoauthserverdeveloper objects
	 * @throws     PropelException
	 */
	public function getSfoauthserverdevelopers($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collSfoauthserverdevelopers || null !== $criteria) {
			if ($this->isNew() && null === $this->collSfoauthserverdevelopers) {
				// return empty collection
				$this->initSfoauthserverdevelopers();
			} else {
				$collSfoauthserverdevelopers = SfoauthserverdeveloperQuery::create(null, $criteria)
					->filterBySfoauthserverconsumer($this)
					->find($con);
				if (null !== $criteria) {
					return $collSfoauthserverdevelopers;
				}
				$this->collSfoauthserverdevelopers = $collSfoauthserverdevelopers;
			}
		}
		return $this->collSfoauthserverdevelopers;
	}

	/**
	 * Sets a collection of Sfoauthserverdeveloper objects related by a one-to-many relationship
	 * to the current object.
	 * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
	 * and new objects from the given Propel collection.
	 *
	 * @param      PropelCollection $sfoauthserverdevelopers A Propel collection.
	 * @param      PropelPDO $con Optional connection object
	 */
	public function setSfoauthserverdevelopers(PropelCollection $sfoauthserverdevelopers, PropelPDO $con = null)
	{
		$this->sfoauthserverdevelopersScheduledForDeletion = $this->getSfoauthserverdevelopers(new Criteria(), $con)->diff($sfoauthserverdevelopers);

		foreach ($sfoauthserverdevelopers as $sfoauthserverdeveloper) {
			// Fix issue with collection modified by reference
			if ($sfoauthserverdeveloper->isNew()) {
				$sfoauthserverdeveloper->setSfoauthserverconsumer($this);
			}
			$this->addSfoauthserverdeveloper($sfoauthserverdeveloper);
		}

		$this->collSfoauthserverdevelopers = $sfoauthserverdevelopers;
	}

	/**
	 * Returns the number of related Sfoauthserverdeveloper objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Sfoauthserverdeveloper objects.
	 * @throws     PropelException
	 */
	public function countSfoauthserverdevelopers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collSfoauthserverdevelopers || null !== $criteria) {
			if ($this->isNew() && null === $this->collSfoauthserverdevelopers) {
				return 0;
			} else {
				$query = SfoauthserverdeveloperQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterBySfoauthserverconsumer($this)
					->count($con);
			}
		} else {
			return count($this->collSfoauthserverdevelopers);
		}
	}

	/**
	 * Method called to associate a Sfoauthserverdeveloper object to this object
	 * through the Sfoauthserverdeveloper foreign key attribute.
	 *
	 * @param      Sfoauthserverdeveloper $l Sfoauthserverdeveloper
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function addSfoauthserverdeveloper(Sfoauthserverdeveloper $l)
	{
		if ($this->collSfoauthserverdevelopers === null) {
			$this->initSfoauthserverdevelopers();
		}
		if (!$this->collSfoauthserverdevelopers->contains($l)) { // only add it if the **same** object is not already associated
			$this->doAddSfoauthserverdeveloper($l);
		}

		return $this;
	}

	/**
	 * @param	Sfoauthserverdeveloper $sfoauthserverdeveloper The sfoauthserverdeveloper object to add.
	 */
	protected function doAddSfoauthserverdeveloper($sfoauthserverdeveloper)
	{
		$this->collSfoauthserverdevelopers[]= $sfoauthserverdeveloper;
		$sfoauthserverdeveloper->setSfoauthserverconsumer($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Sfoauthserverconsumer is new, it will return
	 * an empty collection; or if this Sfoauthserverconsumer has previously
	 * been saved, it will retrieve related Sfoauthserverdevelopers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Sfoauthserverconsumer.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Sfoauthserverdeveloper[] List of Sfoauthserverdeveloper objects
	 */
	public function getSfoauthserverdevelopersJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = SfoauthserverdeveloperQuery::create(null, $criteria);
		$query->joinWith('sfGuardUser', $join_behavior);

		return $this->getSfoauthserverdevelopers($query, $con);
	}

	/**
	 * Clears out the collSfoauthserverrequesttokens collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSfoauthserverrequesttokens()
	 */
	public function clearSfoauthserverrequesttokens()
	{
		$this->collSfoauthserverrequesttokens = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSfoauthserverrequesttokens collection.
	 *
	 * By default this just sets the collSfoauthserverrequesttokens collection to an empty array (like clearcollSfoauthserverrequesttokens());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initSfoauthserverrequesttokens($overrideExisting = true)
	{
		if (null !== $this->collSfoauthserverrequesttokens && !$overrideExisting) {
			return;
		}
		$this->collSfoauthserverrequesttokens = new PropelObjectCollection();
		$this->collSfoauthserverrequesttokens->setModel('Sfoauthserverrequesttoken');
	}

	/**
	 * Gets an array of Sfoauthserverrequesttoken objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Sfoauthserverconsumer is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Sfoauthserverrequesttoken[] List of Sfoauthserverrequesttoken objects
	 * @throws     PropelException
	 */
	public function getSfoauthserverrequesttokens($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collSfoauthserverrequesttokens || null !== $criteria) {
			if ($this->isNew() && null === $this->collSfoauthserverrequesttokens) {
				// return empty collection
				$this->initSfoauthserverrequesttokens();
			} else {
				$collSfoauthserverrequesttokens = SfoauthserverrequesttokenQuery::create(null, $criteria)
					->filterBySfoauthserverconsumer($this)
					->find($con);
				if (null !== $criteria) {
					return $collSfoauthserverrequesttokens;
				}
				$this->collSfoauthserverrequesttokens = $collSfoauthserverrequesttokens;
			}
		}
		return $this->collSfoauthserverrequesttokens;
	}

	/**
	 * Sets a collection of Sfoauthserverrequesttoken objects related by a one-to-many relationship
	 * to the current object.
	 * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
	 * and new objects from the given Propel collection.
	 *
	 * @param      PropelCollection $sfoauthserverrequesttokens A Propel collection.
	 * @param      PropelPDO $con Optional connection object
	 */
	public function setSfoauthserverrequesttokens(PropelCollection $sfoauthserverrequesttokens, PropelPDO $con = null)
	{
		$this->sfoauthserverrequesttokensScheduledForDeletion = $this->getSfoauthserverrequesttokens(new Criteria(), $con)->diff($sfoauthserverrequesttokens);

		foreach ($sfoauthserverrequesttokens as $sfoauthserverrequesttoken) {
			// Fix issue with collection modified by reference
			if ($sfoauthserverrequesttoken->isNew()) {
				$sfoauthserverrequesttoken->setSfoauthserverconsumer($this);
			}
			$this->addSfoauthserverrequesttoken($sfoauthserverrequesttoken);
		}

		$this->collSfoauthserverrequesttokens = $sfoauthserverrequesttokens;
	}

	/**
	 * Returns the number of related Sfoauthserverrequesttoken objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Sfoauthserverrequesttoken objects.
	 * @throws     PropelException
	 */
	public function countSfoauthserverrequesttokens(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collSfoauthserverrequesttokens || null !== $criteria) {
			if ($this->isNew() && null === $this->collSfoauthserverrequesttokens) {
				return 0;
			} else {
				$query = SfoauthserverrequesttokenQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterBySfoauthserverconsumer($this)
					->count($con);
			}
		} else {
			return count($this->collSfoauthserverrequesttokens);
		}
	}

	/**
	 * Method called to associate a Sfoauthserverrequesttoken object to this object
	 * through the Sfoauthserverrequesttoken foreign key attribute.
	 *
	 * @param      Sfoauthserverrequesttoken $l Sfoauthserverrequesttoken
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function addSfoauthserverrequesttoken(Sfoauthserverrequesttoken $l)
	{
		if ($this->collSfoauthserverrequesttokens === null) {
			$this->initSfoauthserverrequesttokens();
		}
		if (!$this->collSfoauthserverrequesttokens->contains($l)) { // only add it if the **same** object is not already associated
			$this->doAddSfoauthserverrequesttoken($l);
		}

		return $this;
	}

	/**
	 * @param	Sfoauthserverrequesttoken $sfoauthserverrequesttoken The sfoauthserverrequesttoken object to add.
	 */
	protected function doAddSfoauthserverrequesttoken($sfoauthserverrequesttoken)
	{
		$this->collSfoauthserverrequesttokens[]= $sfoauthserverrequesttoken;
		$sfoauthserverrequesttoken->setSfoauthserverconsumer($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Sfoauthserverconsumer is new, it will return
	 * an empty collection; or if this Sfoauthserverconsumer has previously
	 * been saved, it will retrieve related Sfoauthserverrequesttokens from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Sfoauthserverconsumer.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Sfoauthserverrequesttoken[] List of Sfoauthserverrequesttoken objects
	 */
	public function getSfoauthserverrequesttokensJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = SfoauthserverrequesttokenQuery::create(null, $criteria);
		$query->joinWith('sfGuardUser', $join_behavior);

		return $this->getSfoauthserverrequesttokens($query, $con);
	}

	/**
	 * Clears out the collSfoauthserveraccesstokens collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSfoauthserveraccesstokens()
	 */
	public function clearSfoauthserveraccesstokens()
	{
		$this->collSfoauthserveraccesstokens = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSfoauthserveraccesstokens collection.
	 *
	 * By default this just sets the collSfoauthserveraccesstokens collection to an empty array (like clearcollSfoauthserveraccesstokens());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initSfoauthserveraccesstokens($overrideExisting = true)
	{
		if (null !== $this->collSfoauthserveraccesstokens && !$overrideExisting) {
			return;
		}
		$this->collSfoauthserveraccesstokens = new PropelObjectCollection();
		$this->collSfoauthserveraccesstokens->setModel('Sfoauthserveraccesstoken');
	}

	/**
	 * Gets an array of Sfoauthserveraccesstoken objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Sfoauthserverconsumer is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Sfoauthserveraccesstoken[] List of Sfoauthserveraccesstoken objects
	 * @throws     PropelException
	 */
	public function getSfoauthserveraccesstokens($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collSfoauthserveraccesstokens || null !== $criteria) {
			if ($this->isNew() && null === $this->collSfoauthserveraccesstokens) {
				// return empty collection
				$this->initSfoauthserveraccesstokens();
			} else {
				$collSfoauthserveraccesstokens = SfoauthserveraccesstokenQuery::create(null, $criteria)
					->filterBySfoauthserverconsumer($this)
					->find($con);
				if (null !== $criteria) {
					return $collSfoauthserveraccesstokens;
				}
				$this->collSfoauthserveraccesstokens = $collSfoauthserveraccesstokens;
			}
		}
		return $this->collSfoauthserveraccesstokens;
	}

	/**
	 * Sets a collection of Sfoauthserveraccesstoken objects related by a one-to-many relationship
	 * to the current object.
	 * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
	 * and new objects from the given Propel collection.
	 *
	 * @param      PropelCollection $sfoauthserveraccesstokens A Propel collection.
	 * @param      PropelPDO $con Optional connection object
	 */
	public function setSfoauthserveraccesstokens(PropelCollection $sfoauthserveraccesstokens, PropelPDO $con = null)
	{
		$this->sfoauthserveraccesstokensScheduledForDeletion = $this->getSfoauthserveraccesstokens(new Criteria(), $con)->diff($sfoauthserveraccesstokens);

		foreach ($sfoauthserveraccesstokens as $sfoauthserveraccesstoken) {
			// Fix issue with collection modified by reference
			if ($sfoauthserveraccesstoken->isNew()) {
				$sfoauthserveraccesstoken->setSfoauthserverconsumer($this);
			}
			$this->addSfoauthserveraccesstoken($sfoauthserveraccesstoken);
		}

		$this->collSfoauthserveraccesstokens = $sfoauthserveraccesstokens;
	}

	/**
	 * Returns the number of related Sfoauthserveraccesstoken objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Sfoauthserveraccesstoken objects.
	 * @throws     PropelException
	 */
	public function countSfoauthserveraccesstokens(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collSfoauthserveraccesstokens || null !== $criteria) {
			if ($this->isNew() && null === $this->collSfoauthserveraccesstokens) {
				return 0;
			} else {
				$query = SfoauthserveraccesstokenQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterBySfoauthserverconsumer($this)
					->count($con);
			}
		} else {
			return count($this->collSfoauthserveraccesstokens);
		}
	}

	/**
	 * Method called to associate a Sfoauthserveraccesstoken object to this object
	 * through the Sfoauthserveraccesstoken foreign key attribute.
	 *
	 * @param      Sfoauthserveraccesstoken $l Sfoauthserveraccesstoken
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function addSfoauthserveraccesstoken(Sfoauthserveraccesstoken $l)
	{
		if ($this->collSfoauthserveraccesstokens === null) {
			$this->initSfoauthserveraccesstokens();
		}
		if (!$this->collSfoauthserveraccesstokens->contains($l)) { // only add it if the **same** object is not already associated
			$this->doAddSfoauthserveraccesstoken($l);
		}

		return $this;
	}

	/**
	 * @param	Sfoauthserveraccesstoken $sfoauthserveraccesstoken The sfoauthserveraccesstoken object to add.
	 */
	protected function doAddSfoauthserveraccesstoken($sfoauthserveraccesstoken)
	{
		$this->collSfoauthserveraccesstokens[]= $sfoauthserveraccesstoken;
		$sfoauthserveraccesstoken->setSfoauthserverconsumer($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Sfoauthserverconsumer is new, it will return
	 * an empty collection; or if this Sfoauthserverconsumer has previously
	 * been saved, it will retrieve related Sfoauthserveraccesstokens from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Sfoauthserverconsumer.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Sfoauthserveraccesstoken[] List of Sfoauthserveraccesstoken objects
	 */
	public function getSfoauthserveraccesstokensJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = SfoauthserveraccesstokenQuery::create(null, $criteria);
		$query->joinWith('sfGuardUser', $join_behavior);

		return $this->getSfoauthserveraccesstokens($query, $con);
	}

	/**
	 * Clears out the collSfoauthserveruserscopes collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSfoauthserveruserscopes()
	 */
	public function clearSfoauthserveruserscopes()
	{
		$this->collSfoauthserveruserscopes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSfoauthserveruserscopes collection.
	 *
	 * By default this just sets the collSfoauthserveruserscopes collection to an empty array (like clearcollSfoauthserveruserscopes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initSfoauthserveruserscopes($overrideExisting = true)
	{
		if (null !== $this->collSfoauthserveruserscopes && !$overrideExisting) {
			return;
		}
		$this->collSfoauthserveruserscopes = new PropelObjectCollection();
		$this->collSfoauthserveruserscopes->setModel('Sfoauthserveruserscope');
	}

	/**
	 * Gets an array of Sfoauthserveruserscope objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Sfoauthserverconsumer is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Sfoauthserveruserscope[] List of Sfoauthserveruserscope objects
	 * @throws     PropelException
	 */
	public function getSfoauthserveruserscopes($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collSfoauthserveruserscopes || null !== $criteria) {
			if ($this->isNew() && null === $this->collSfoauthserveruserscopes) {
				// return empty collection
				$this->initSfoauthserveruserscopes();
			} else {
				$collSfoauthserveruserscopes = SfoauthserveruserscopeQuery::create(null, $criteria)
					->filterBySfoauthserverconsumer($this)
					->find($con);
				if (null !== $criteria) {
					return $collSfoauthserveruserscopes;
				}
				$this->collSfoauthserveruserscopes = $collSfoauthserveruserscopes;
			}
		}
		return $this->collSfoauthserveruserscopes;
	}

	/**
	 * Sets a collection of Sfoauthserveruserscope objects related by a one-to-many relationship
	 * to the current object.
	 * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
	 * and new objects from the given Propel collection.
	 *
	 * @param      PropelCollection $sfoauthserveruserscopes A Propel collection.
	 * @param      PropelPDO $con Optional connection object
	 */
	public function setSfoauthserveruserscopes(PropelCollection $sfoauthserveruserscopes, PropelPDO $con = null)
	{
		$this->sfoauthserveruserscopesScheduledForDeletion = $this->getSfoauthserveruserscopes(new Criteria(), $con)->diff($sfoauthserveruserscopes);

		foreach ($sfoauthserveruserscopes as $sfoauthserveruserscope) {
			// Fix issue with collection modified by reference
			if ($sfoauthserveruserscope->isNew()) {
				$sfoauthserveruserscope->setSfoauthserverconsumer($this);
			}
			$this->addSfoauthserveruserscope($sfoauthserveruserscope);
		}

		$this->collSfoauthserveruserscopes = $sfoauthserveruserscopes;
	}

	/**
	 * Returns the number of related Sfoauthserveruserscope objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Sfoauthserveruserscope objects.
	 * @throws     PropelException
	 */
	public function countSfoauthserveruserscopes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collSfoauthserveruserscopes || null !== $criteria) {
			if ($this->isNew() && null === $this->collSfoauthserveruserscopes) {
				return 0;
			} else {
				$query = SfoauthserveruserscopeQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterBySfoauthserverconsumer($this)
					->count($con);
			}
		} else {
			return count($this->collSfoauthserveruserscopes);
		}
	}

	/**
	 * Method called to associate a Sfoauthserveruserscope object to this object
	 * through the Sfoauthserveruserscope foreign key attribute.
	 *
	 * @param      Sfoauthserveruserscope $l Sfoauthserveruserscope
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function addSfoauthserveruserscope(Sfoauthserveruserscope $l)
	{
		if ($this->collSfoauthserveruserscopes === null) {
			$this->initSfoauthserveruserscopes();
		}
		if (!$this->collSfoauthserveruserscopes->contains($l)) { // only add it if the **same** object is not already associated
			$this->doAddSfoauthserveruserscope($l);
		}

		return $this;
	}

	/**
	 * @param	Sfoauthserveruserscope $sfoauthserveruserscope The sfoauthserveruserscope object to add.
	 */
	protected function doAddSfoauthserveruserscope($sfoauthserveruserscope)
	{
		$this->collSfoauthserveruserscopes[]= $sfoauthserveruserscope;
		$sfoauthserveruserscope->setSfoauthserverconsumer($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Sfoauthserverconsumer is new, it will return
	 * an empty collection; or if this Sfoauthserverconsumer has previously
	 * been saved, it will retrieve related Sfoauthserveruserscopes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Sfoauthserverconsumer.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Sfoauthserveruserscope[] List of Sfoauthserveruserscope objects
	 */
	public function getSfoauthserveruserscopesJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = SfoauthserveruserscopeQuery::create(null, $criteria);
		$query->joinWith('sfGuardUser', $join_behavior);

		return $this->getSfoauthserveruserscopes($query, $con);
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->consumer_key = null;
		$this->consumer_secret = null;
		$this->name = null;
		$this->description = null;
		$this->protocole = null;
		$this->base_domain = null;
		$this->callback = null;
		$this->scope = null;
		$this->number_query = null;
		$this->id = null;
		$this->created_at = null;
		$this->updated_at = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->applyDefaultValues();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all references to other model objects or collections of model objects.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect
	 * objects with circular references (even in PHP 5.3). This is currently necessary
	 * when using Propel in certain daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all referrer objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collSfoauthserverdevelopers) {
				foreach ($this->collSfoauthserverdevelopers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSfoauthserverrequesttokens) {
				foreach ($this->collSfoauthserverrequesttokens as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSfoauthserveraccesstokens) {
				foreach ($this->collSfoauthserveraccesstokens as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSfoauthserveruserscopes) {
				foreach ($this->collSfoauthserveruserscopes as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		if ($this->collSfoauthserverdevelopers instanceof PropelCollection) {
			$this->collSfoauthserverdevelopers->clearIterator();
		}
		$this->collSfoauthserverdevelopers = null;
		if ($this->collSfoauthserverrequesttokens instanceof PropelCollection) {
			$this->collSfoauthserverrequesttokens->clearIterator();
		}
		$this->collSfoauthserverrequesttokens = null;
		if ($this->collSfoauthserveraccesstokens instanceof PropelCollection) {
			$this->collSfoauthserveraccesstokens->clearIterator();
		}
		$this->collSfoauthserveraccesstokens = null;
		if ($this->collSfoauthserveruserscopes instanceof PropelCollection) {
			$this->collSfoauthserveruserscopes->clearIterator();
		}
		$this->collSfoauthserveruserscopes = null;
	}

	/**
	 * Return the string representation of this object
	 *
	 * @return string
	 */
	public function __toString()
	{
		return (string) $this->exportTo(SfoauthserverconsumerPeer::DEFAULT_STRING_FORMAT);
	}

	// timestampable behavior
	
	/**
	 * Mark the current object so that the update date doesn't get updated during next save
	 *
	 * @return     Sfoauthserverconsumer The current object (for fluent API support)
	 */
	public function keepUpdateDateUnchanged()
	{
		$this->modifiedColumns[] = SfoauthserverconsumerPeer::UPDATED_AT;
		return $this;
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseSfoauthserverconsumer:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		return parent::__call($name, $params);
	}

} // BaseSfoauthserverconsumer
