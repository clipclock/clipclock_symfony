<?php



/**
 * Skeleton subclass for performing query and update operations on the 'follower_user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.3 on:
 *
 * Sat Feb 18 17:27:34 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class UserFollowerPeer extends BaseUserFollowerPeer {

    public static function countFollowersAndFollowingByUserId($user_id)
    {
        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::FOLLOWER_SF_GUARD_USER_PROFILE_ID.' as count');
        $c->add(self::FOLLOWING_SF_GUARD_USER_PROFILE_ID, $user_id);
        $followers_count = BasePeer::doCount($c)->fetch(PDO::FETCH_ASSOC);

        $c = new Criteria();
        $c->clearSelectColumns();
        $c->addSelectColumn(self::FOLLOWING_SF_GUARD_USER_PROFILE_ID.' as count');
        $c->add(self::FOLLOWER_SF_GUARD_USER_PROFILE_ID, $user_id);
        $followings_count = BasePeer::doCount($c)->fetch(PDO::FETCH_ASSOC);

        return array('followers_count' => $followers_count['count'], 'followings_count' => $followings_count['count']);
    }

    protected static function buildFollowerCriteria($user_id, $follower_id, $insert = false)
    {
        $c = new Criteria();
        $c->add(self::FOLLOWING_SF_GUARD_USER_PROFILE_ID, $user_id);
        $c->add(self::FOLLOWER_SF_GUARD_USER_PROFILE_ID, $follower_id);
		if($insert)
		{
			$c->add(self::CREATED_AT, date('Y-m-d H:i:s', time()-7*24*3600));
		}

        return $c;
    }

    public static function isUserFollowedByUser($user_id, $follower_id)
    {
        return self::doCount(self::buildFollowerCriteria($user_id, $follower_id));
    }

    public static function followUserByFollower($user_id, $follower_id)
    {
        try {
            self::doInsert(self::buildFollowerCriteria($user_id, $follower_id));
        } catch (Exception $e) {
            return false;
        }

        return true;
    }

    public static function unfollowUserByFollower($user_id, $follower_id)
    {
        try {
            self::doDelete(self::buildFollowerCriteria($user_id, $follower_id));
        } catch (Exception $e) {
            return false;
        }

        return true;
    }

	public static function retrieveIdByFollower($user_id)
	{
		$c = new Criteria();
		$c->add(self::FOLLOWER_SF_GUARD_USER_PROFILE_ID, $user_id);
		$c->clearSelectColumns();
		$c->addSelectColumn(self::FOLLOWING_SF_GUARD_USER_PROFILE_ID . ' as user_id');
		$c->addSelectColumn(self::CREATED_AT . ' as created_at');
		$c->setLimit(1);

		return BasePeer::doSelect($c)->fetch(PDO::FETCH_ASSOC);
	}

} // UserFollowerPeer
